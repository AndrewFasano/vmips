#!/bin/sh

srcdir="@srcdir@"
top_srcdir="@top_srcdir@"
prefix="@prefix@"
exec_prefix="@exec_prefix@"

bindir="@bindir@"
sbindir="@sbindir@"
libexecdir="@libexecdir@"
datadir="@datadir@"
sysconfdir="@sysconfdir@"
sharedstatedir="@sharedstatedir@"
localstatedir="@localstatedir@"
libdir="@libdir@"
infodir="@infodir@"
mandir="@mandir@"
includedir="@includedir@"

pkgdatadir="${datadir}/@PACKAGE@"
pkglibdir="${libdir}/@PACKAGE@"
pkgincludedir="${includedir}/@PACKAGE@"

verbose=0
dryrun=0

# ROMs are padded to this many bytes. I don't think this is strictly
# necessary and will probably go away eventually.
pagesz=4096

usage () {
	echo "usage:"
	echo " vmipstool [ VT-FLAGS ] --compile [ FLAGS ] FILE.c -o FILE.o"
	echo " vmipstool [ VT-FLAGS ] --preprocess [ FLAGS ] FILE"
	echo " vmipstool [ VT-FLAGS ] --assemble [ FLAGS ] FILE.s -o FILE.o"
	echo " vmipstool [ VT-FLAGS ] --link [ FLAGS ] FILE1.o ... FILEn.o -o PROG"
	echo " vmipstool [ VT-FLAGS ] --make-rom PROG PROG.rom"
	echo " vmipstool [ VT-FLAGS ] --disassemble-rom PROG.rom"
	echo " vmipstool [ VT-FLAGS ] --disassemble PROG (or FILE.o)"
	echo " "
	echo "VT-FLAGS may include:"
	echo " --verbose        Echo commands as they are run."
	echo " --dry-run        Don't actually run anything; useful with --verbose."
}

maybe-echo () {
	if [ $verbose -eq 1 ]
	then
		echo "$@"
	fi
}

maybe-run () {
	if [ $dryrun -ne 1 ]
	then
		eval "$@"
	fi
}

echo-and-run () {
	maybe-echo "$@"
	maybe-run "$@"
}

# Look for the ld.script
ldscript="${datadir}/ld.script"

if [ ! -f ${ldscript} ]
then
	if [ -f ./ld.script ]
	then
		dir="."
	elif [ -f ../ld.script ]
	then
		dir=".."
	elif [ -f ./test_code/ld.script ]
	then
		dir="./test_code"
	elif [ -f ../test_code/ld.script ]
	then
		dir="../test_code"
	elif [ -f ../../test_code/ld.script ]
	then
		dir="../../test_code"
	else
		echo "Warning: can't find ld.script" 1>&2
		dir="/cant/find"
	fi
	ldscript=${dir}/ld.script
fi

while true
do

option="$1"
shift
case $option in
--version)
	echo "vmipstool (VMIPS) @VERSION@"
	exit 0
	;;
--help)
	usage
	exit 0
	;;
--verbose)
	verbose=1
	;;
--dry-run)
	dryrun=1
	;;
--compile)
	echo-and-run @mipstoolprefix@gcc -mno-abicalls ${1+"$@"}
	exit 0
	;;
--assemble)
	echo-and-run @mipstoolprefix@as @ENDIAN_FLAG@ ${1+"$@"}
	exit 0
	;;
--preprocess)
	cpp=`@mipstoolprefix@gcc --print-prog-name=cpp`
	echo-and-run $cpp ${1+"$@"}
	exit 0
	;;
--link)
	echo-and-run @mipstoolprefix@ld @ENDIAN_FLAG@ -T ${ldscript} ${1+"$@"}
	exit 0
	;;
--make-rom)
	tmpfile="/tmp/vmipstool-$$-1"
	echo-and-run @mipstoolprefix@objcopy -O binary $1 $tmpfile
	maybe-echo dd if=$tmpfile of=$2 bs=$pagesz conv=sync
	maybe-run dd if=$tmpfile of=$2 bs=$pagesz conv=sync > /dev/null 2>&1
	echo-and-run rm $tmpfile
	exit 0
	;;
--disassemble-rom)
    echo-and-run @mipstoolprefix@objdump --disassemble-all --target=binary @ENDIAN_FLAG@ -m mips $1
	;;
--disassemble)
    echo-and-run @mipstoolprefix@objdump --disassemble @ENDIAN_FLAG@ $1
	;;
*)
	usage
	exit 1
	;;
esac

done

# never got here
