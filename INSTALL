
These installation instructions are copied from the VMIPS Manual. For
bug-reporting instructions, please see the README file in the source
distribution, or read the VMIPS Manual.

Installation
************

   The VMIPS build process assumes that you have a full set of GNU MIPS
cross compilation tools installed, because you'll need them to do
anything useful with VMIPS. For a concise summary of how to build the
necessary MIPS cross tools, read "Building MIPS Cross Tools", below.

   VMIPS uses the GNU Autoconf/Automake system for configuration
management.  This provides the familiar `configure' shell script
interface for setting configuration variables. For more information
about the special options that VMIPS `configure' accepts, read on, or
give the `--help' option to `configure' for an abridged version.

Building from CVS
=================

   If you retrieved your sources from the CVS repository, you will need
Automake version 1.4 or later, Autoconf version 2.13 or later, and
libtool 1.2f or later. You will need perl 5 to build the documentation.
Your distribution will be missing many important files, including
`configure'. To generate these, run `utils/bootstrap'. To automatically
run configure once it has been generated, you can run `utils/bootstrap
-c CONFIGURE-ARGS'.

Options that configure supports
===============================

   You will need to tell `configure' the configuration prefix you used
to install the MIPS cross tools, by specifying it as the value to the
`--with-mips' argument. For example, if your MIPS cross compiler is
`/opt/mips/bin/mips-dec-ultrix4.3-gcc' and your MIPS-targeted
libopcodes libtool library (which should have been installed by the
binutils Makefile) is `/opt/mips/lib/libopcodes.la', then you should
specify `--with-mips=/opt/mips' on the `configure' command line.

   Other options that "configure" supports are as follows:

`--with-mips=MDIR'
     Specify installation prefix of MIPS cross tools (default MDIR =
     /opt/mips).

`--with-mips-lib=DIR'
     Specify path to MIPS cross tools' libraries (default MDIR/lib).

`--with-mips-bin=DIR'
     Specify path to MIPS cross tools' executables (default MDIR/bin).

`--with-mips-include=DIR'
     Specify path to MIPS cross tools' includes (default MDIR/include).

`--with-mips-bfdtarget=TARG'
     Specify MIPS cross tools BFD target name (defaults to the first
     target listed in the output of objdump -i). Normally you can let
     configure guess this, unless you built your MIPS tools for a
     target (mips-ecoff or mips-elf, for example) which supports both
     big-endian and little-endian data.

`--with-mips-endianness=VAL'
     Specify endianness of the VMIPS simulated machine, which must
     match the MIPS cross tools target's endianness.  VAL may be
     specified as `big' or `little'.  It is best to let configure guess
     this (using objdump -i), unless you have reason to believe it is
     guessing wrong, because if you get it wrong, vmipstool may compile
     ROMs that do not run correctly under vmips.

`--disable-debug'
     Strip debugging symbols and turn on all the compiler optimizations.
     The default is not to do this (i.e., leave in the debugging
     symbols, and turn off all the compiler optimizations.)

`--disable-tty'
     Do not include (default=include) support for the emulated serial
     interface.

Building MIPS Cross Tools
=========================

   First decide on an installation prefix. The following examples will
use the prefix "/opt/mips", as above.

   Download a copy of Binutils, from any GNU mirror, or from the URL:
     <ftp://sources.redhat.com/pub/binutils/releases>
   We recommend getting version 2.10.1. The file you will need would be
named `binutils-2.10.1.tar.gz'.

   Build binutils by running the following commands. We recommend
`--disable-nls' because some recent versions do not build correctly with
NLS (linking against `libopcodes.a' results in unresolved symbols.)

     ./configure --target=mips-dec-ultrix4.3 --prefix=/opt/mips \
      --disable-nls --enable-shared
     make
     make install

   Save a copy of `include/dis-asm.h' from the Binutils source
distribution.  You'll need to install it as `include/dis-asm.h' in the
VMIPS source distribution, in order to ensure compatibility between the
version of Binutils you used and VMIPS.

   Download a copy of the GNU Compiler Collection (`gcc') from any GNU
mirror, or from the URL:
     <ftp://gcc.gnu.org/pub/gcc/releases>
   We recommend version 2.95.2. Download the file `gcc-2.95.2.tar.gz'.

   You can read the documentation for building the compiler by pointing
your World-Wide Web browser at <http://gcc.gnu.org/install>.  When you
encounter difficulties, you should consider consulting the
documentation for building the compiler, because it is more complete
than the following summary.

  1. Unpack the sources. Let's say you unpack them in `/usr/build',
     creating the directory `/usr/build/gcc-2.95.2'.

  2. Create the build directory `/usr/build/gcc-mips-build'.

  3. First, add the directory `/opt/mips/bin' (where you just installed
     Binutils) to your path, so that the compiler configuration process
     can find your MIPS-targetted assembler and linker.

  4. Configure the compiler. Change to the directory
     `/usr/build/gcc-mips-build' and issue the following command. (The
     back-slash characters represent the usual Unix shell convention of
     continuing a command on the following line, and are inserted for
     typesetting purposes.)

          ../gcc-2.95.2/configure --target=mips-dec-ultrix4.3 \
           --prefix=/opt/mips --with-gnu-as --with-gnu-ld \
           --disable-threads --disable-shared

  5. If the configuration step fails, make sure you have a working
     native compiler, and/or try a different version of gcc. Otherwise,
     proceed to compile the compiler:

          make -k MAKE='make -k TARGET_LIBGCC2_CFLAGS=-Dinhibit_libc' cross
          make -k LANGUAGES=c install

     The reason `make -k' is required is because some parts of the gcc
     toolkit may fail to build, but the compiler itself may be OK.

     The `-Dinhibit_libc' option is required when you are building the
     compiler in the absence of a MIPS C library, as is often the case
     with VMIPS users.

     Do not be alarmed by errors in building or installing the compiler;
     the cross compiler install interface is less than polished.

  6. You should be able to use the newly-installed  compiler to compile
     (but not link) a program that does not use any C library functions.
     If this works, you should be able to use the cross tools you have
     just built for VMIPS.

     If you want to build a MIPS C library, you can also do that now,
     but it is not strictly required for many useful VMIPS tasks. Some
     persons have reported success using the "newlib" C library from
     Cygnus. The GNU C Library (glibc) is fairly difficult to build.
     Instructions for building a C library will appear here soon.

The remainder of this file represents generic (i.e., not VMIPS-specific)
instructions for using "configure".

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
