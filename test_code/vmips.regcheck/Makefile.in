# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# Makefile.am automatically generated by testcase-maker.
# If you make changes here they will go away.


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ../..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@
AS = @AS@
ASFLAGS = @ASFLAGS@
AWK = @AWK@
CC = @CC@
CPP = @CPP@
CXX = @CXX@
DLLTOOL = @DLLTOOL@
ECHO = @ECHO@
ENDIAN_FLAG = @ENDIAN_FLAG@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
SOLARIS_DL_HACK = @SOLARIS_DL_HACK@
STRIP = @STRIP@
VERSION = @VERSION@
mipsbfdtarget = @mipsbfdtarget@
mipsbin = @mipsbin@
mipscpp = @mipscpp@
mipsincdirs = @mipsincdirs@
mipslibdirs = @mipslibdirs@
mipstoolprefix = @mipstoolprefix@

VMIPSTOOL = ../../vmipstool
CPP_FLAGS = -I@top_srcdir@ -I@top_srcdir@/sample_code
CFLAGS = -g $(CPP_FLAGS)
SETUP = ../../sample_code/setup.o

# simple_asm add
# multifile_asm -setup 0 add add.S
add_SOURCES = add.S

# simple_asm addi
# multifile_asm -setup 0 addi addi.S
addi_SOURCES = addi.S

# simple_asm bc0
# multifile_asm -setup 0 bc0 bc0.S
bc0_SOURCES = bc0.S

# simple_asm bgezal
# multifile_asm -setup 0 bgezal bgezal.S
bgezal_SOURCES = bgezal.S

# simple_asm bgtz
# multifile_asm -setup 0 bgtz bgtz.S
bgtz_SOURCES = bgtz.S

# simple_asm blez
# multifile_asm -setup 0 blez blez.S
blez_SOURCES = blez.S

# simple_asm bltz
# multifile_asm -setup 0 bltz bltz.S
bltz_SOURCES = bltz.S

# simple_asm bltzal
# multifile_asm -setup 0 bltzal bltzal.S
bltzal_SOURCES = bltzal.S

# simple_asm coproc
# multifile_asm -setup 0 coproc coproc.S
coproc_SOURCES = coproc.S

# simple_asm divu
# multifile_asm -setup 0 divu divu.S
divu_SOURCES = divu.S

# simple_asm handler5
# multifile_asm -setup 0 handler5 handler5.S
handler5_SOURCES = handler5.S

# simple_asm jalr
# multifile_asm -setup 0 jalr jalr.S
jalr_SOURCES = jalr.S

# simple_asm load
# multifile_asm -setup 0 load load.S
load_SOURCES = load.S

# simple_asm logical
# multifile_asm -setup 0 logical logical.S
logical_SOURCES = logical.S

# simple_asm lwl
# multifile_asm -setup 0 lwl lwl.S
lwl_SOURCES = lwl.S

# simple_asm lwr
# multifile_asm -setup 0 lwr lwr.S
lwr_SOURCES = lwr.S

# simple_asm mthi_lo
# multifile_asm -setup 0 mthi_lo mthi_lo.S
mthi_lo_SOURCES = mthi_lo.S

# simple_asm multu
# multifile_asm -setup 0 multu multu.S
multu_SOURCES = multu.S

# simple_asm mumble
# multifile_asm -setup 0 mumble mumble.S
mumble_SOURCES = mumble.S

# simple_asm shift
# multifile_asm -setup 0 shift shift.S
shift_SOURCES = shift.S

# simple_asm slti
# multifile_asm -setup 0 slti slti.S
slti_SOURCES = slti.S

# simple_asm -setup 1 store
# multifile_asm -setup 1 store store.S
store_LDFLAGS = $(SETUP)
store_SOURCES = store.S

# simple_asm sub
# multifile_asm -setup 0 sub sub.S
sub_SOURCES = sub.S

# simple_asm -setup 1 swl
# multifile_asm -setup 1 swl swl.S
swl_LDFLAGS = $(SETUP)
swl_SOURCES = swl.S

# simple_asm -setup 1 swr
# multifile_asm -setup 1 swr swr.S
swr_LDFLAGS = $(SETUP)
swr_SOURCES = swr.S

# simple_asm syscall
# multifile_asm -setup 0 syscall syscall.S
syscall_SOURCES = syscall.S

# simple_c tester
# multifile_c tester tester.c
tester_LDFLAGS = $(SETUP)
tester_SOURCES = tester.c

# simple_asm -setup 1 tlbwr
# multifile_asm -setup 1 tlbwr tlbwr.S
tlbwr_LDFLAGS = $(SETUP)
tlbwr_SOURCES = tlbwr.S

# simple_asm xor
# multifile_asm -setup 0 xor xor.S
xor_SOURCES = xor.S

noinst_PROGRAMS = add addi bc0 bgezal bgtz blez bltz bltzal coproc divu handler5 jalr load logical lwl lwr mthi_lo multu mumble shift slti store sub swl swr syscall tester tlbwr xor

LINK = $(VMIPSTOOL) --link -o $@
COMPILE = $(VMIPSTOOL) --compile $(CFLAGS) -o $@
ASCOMPILE = $(VMIPSTOOL) --compile $(CFLAGS) -o $@
EXEEXT = .exe

CLEANFILES = add.rom addi.rom bc0.rom bgezal.rom bgtz.rom blez.rom bltz.rom bltzal.rom coproc.rom divu.rom handler5.rom jalr.rom load.rom logical.rom lwl.rom lwr.rom mthi_lo.rom multu.rom mumble.rom shift.rom slti.rom store.rom sub.rom swl.rom swr.rom syscall.rom tester.rom tlbwr.rom xor.rom

EXTRA_DIST = regcheck.exp  add.par addi.par bc0.par bgezal.par bgtz.par blez.par bltz.par bltzal.par coproc.par divu.par handler5.par jalr.par load.par logical.par lwl.par lwr.par mthi_lo.par multu.par mumble.par shift.par slti.par store.par sub.par swl.par swr.par syscall.par tester.par tlbwr.par xor.par
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../../config.h
CONFIG_CLEAN_FILES = 
noinst_PROGRAMS =  add$(EXEEXT) addi$(EXEEXT) bc0$(EXEEXT) \
bgezal$(EXEEXT) bgtz$(EXEEXT) blez$(EXEEXT) bltz$(EXEEXT) \
bltzal$(EXEEXT) coproc$(EXEEXT) divu$(EXEEXT) handler5$(EXEEXT) \
jalr$(EXEEXT) load$(EXEEXT) logical$(EXEEXT) lwl$(EXEEXT) lwr$(EXEEXT) \
mthi_lo$(EXEEXT) multu$(EXEEXT) mumble$(EXEEXT) shift$(EXEEXT) \
slti$(EXEEXT) store$(EXEEXT) sub$(EXEEXT) swl$(EXEEXT) swr$(EXEEXT) \
syscall$(EXEEXT) tester$(EXEEXT) tlbwr$(EXEEXT) xor$(EXEEXT)
PROGRAMS =  $(noinst_PROGRAMS)


DEFS = @DEFS@ -I. -I$(srcdir) -I../..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
add_OBJECTS =  add.$(OBJEXT)
add_LDADD = $(LDADD)
add_DEPENDENCIES = 
add_LDFLAGS = 
addi_OBJECTS =  addi.$(OBJEXT)
addi_LDADD = $(LDADD)
addi_DEPENDENCIES = 
addi_LDFLAGS = 
bc0_OBJECTS =  bc0.$(OBJEXT)
bc0_LDADD = $(LDADD)
bc0_DEPENDENCIES = 
bc0_LDFLAGS = 
bgezal_OBJECTS =  bgezal.$(OBJEXT)
bgezal_LDADD = $(LDADD)
bgezal_DEPENDENCIES = 
bgezal_LDFLAGS = 
bgtz_OBJECTS =  bgtz.$(OBJEXT)
bgtz_LDADD = $(LDADD)
bgtz_DEPENDENCIES = 
bgtz_LDFLAGS = 
blez_OBJECTS =  blez.$(OBJEXT)
blez_LDADD = $(LDADD)
blez_DEPENDENCIES = 
blez_LDFLAGS = 
bltz_OBJECTS =  bltz.$(OBJEXT)
bltz_LDADD = $(LDADD)
bltz_DEPENDENCIES = 
bltz_LDFLAGS = 
bltzal_OBJECTS =  bltzal.$(OBJEXT)
bltzal_LDADD = $(LDADD)
bltzal_DEPENDENCIES = 
bltzal_LDFLAGS = 
coproc_OBJECTS =  coproc.$(OBJEXT)
coproc_LDADD = $(LDADD)
coproc_DEPENDENCIES = 
coproc_LDFLAGS = 
divu_OBJECTS =  divu.$(OBJEXT)
divu_LDADD = $(LDADD)
divu_DEPENDENCIES = 
divu_LDFLAGS = 
handler5_OBJECTS =  handler5.$(OBJEXT)
handler5_LDADD = $(LDADD)
handler5_DEPENDENCIES = 
handler5_LDFLAGS = 
jalr_OBJECTS =  jalr.$(OBJEXT)
jalr_LDADD = $(LDADD)
jalr_DEPENDENCIES = 
jalr_LDFLAGS = 
load_OBJECTS =  load.$(OBJEXT)
load_LDADD = $(LDADD)
load_DEPENDENCIES = 
load_LDFLAGS = 
logical_OBJECTS =  logical.$(OBJEXT)
logical_LDADD = $(LDADD)
logical_DEPENDENCIES = 
logical_LDFLAGS = 
lwl_OBJECTS =  lwl.$(OBJEXT)
lwl_LDADD = $(LDADD)
lwl_DEPENDENCIES = 
lwl_LDFLAGS = 
lwr_OBJECTS =  lwr.$(OBJEXT)
lwr_LDADD = $(LDADD)
lwr_DEPENDENCIES = 
lwr_LDFLAGS = 
mthi_lo_OBJECTS =  mthi_lo.$(OBJEXT)
mthi_lo_LDADD = $(LDADD)
mthi_lo_DEPENDENCIES = 
mthi_lo_LDFLAGS = 
multu_OBJECTS =  multu.$(OBJEXT)
multu_LDADD = $(LDADD)
multu_DEPENDENCIES = 
multu_LDFLAGS = 
mumble_OBJECTS =  mumble.$(OBJEXT)
mumble_LDADD = $(LDADD)
mumble_DEPENDENCIES = 
mumble_LDFLAGS = 
shift_OBJECTS =  shift.$(OBJEXT)
shift_LDADD = $(LDADD)
shift_DEPENDENCIES = 
shift_LDFLAGS = 
slti_OBJECTS =  slti.$(OBJEXT)
slti_LDADD = $(LDADD)
slti_DEPENDENCIES = 
slti_LDFLAGS = 
store_OBJECTS =  store.$(OBJEXT)
store_LDADD = $(LDADD)
store_DEPENDENCIES = 
sub_OBJECTS =  sub.$(OBJEXT)
sub_LDADD = $(LDADD)
sub_DEPENDENCIES = 
sub_LDFLAGS = 
swl_OBJECTS =  swl.$(OBJEXT)
swl_LDADD = $(LDADD)
swl_DEPENDENCIES = 
swr_OBJECTS =  swr.$(OBJEXT)
swr_LDADD = $(LDADD)
swr_DEPENDENCIES = 
syscall_OBJECTS =  syscall.$(OBJEXT)
syscall_LDADD = $(LDADD)
syscall_DEPENDENCIES = 
syscall_LDFLAGS = 
tester_OBJECTS =  tester.$(OBJEXT)
tester_LDADD = $(LDADD)
tester_DEPENDENCIES = 
tlbwr_OBJECTS =  tlbwr.$(OBJEXT)
tlbwr_LDADD = $(LDADD)
tlbwr_DEPENDENCIES = 
xor_OBJECTS =  xor.$(OBJEXT)
xor_LDADD = $(LDADD)
xor_DEPENDENCIES = 
xor_LDFLAGS = 
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
SOURCES = $(add_SOURCES) $(addi_SOURCES) $(bc0_SOURCES) $(bgezal_SOURCES) $(bgtz_SOURCES) $(blez_SOURCES) $(bltz_SOURCES) $(bltzal_SOURCES) $(coproc_SOURCES) $(divu_SOURCES) $(handler5_SOURCES) $(jalr_SOURCES) $(load_SOURCES) $(logical_SOURCES) $(lwl_SOURCES) $(lwr_SOURCES) $(mthi_lo_SOURCES) $(multu_SOURCES) $(mumble_SOURCES) $(shift_SOURCES) $(slti_SOURCES) $(store_SOURCES) $(sub_SOURCES) $(swl_SOURCES) $(swr_SOURCES) $(syscall_SOURCES) $(tester_SOURCES) $(tlbwr_SOURCES) $(xor_SOURCES)
OBJECTS = $(add_OBJECTS) $(addi_OBJECTS) $(bc0_OBJECTS) $(bgezal_OBJECTS) $(bgtz_OBJECTS) $(blez_OBJECTS) $(bltz_OBJECTS) $(bltzal_OBJECTS) $(coproc_OBJECTS) $(divu_OBJECTS) $(handler5_OBJECTS) $(jalr_OBJECTS) $(load_OBJECTS) $(logical_OBJECTS) $(lwl_OBJECTS) $(lwr_OBJECTS) $(mthi_lo_OBJECTS) $(multu_OBJECTS) $(mumble_OBJECTS) $(shift_OBJECTS) $(slti_OBJECTS) $(store_OBJECTS) $(sub_OBJECTS) $(swl_OBJECTS) $(swr_OBJECTS) $(syscall_OBJECTS) $(tester_OBJECTS) $(tlbwr_OBJECTS) $(xor_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu --include-deps test_code/vmips.regcheck/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-noinstPROGRAMS:

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)

distclean-noinstPROGRAMS:

maintainer-clean-noinstPROGRAMS:

.c.o:
	$(COMPILE) -c $<

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

add$(EXEEXT): $(add_OBJECTS) $(add_DEPENDENCIES)
	@rm -f add$(EXEEXT)
	$(LINK) $(add_LDFLAGS) $(add_OBJECTS) $(add_LDADD) $(LIBS)

addi$(EXEEXT): $(addi_OBJECTS) $(addi_DEPENDENCIES)
	@rm -f addi$(EXEEXT)
	$(LINK) $(addi_LDFLAGS) $(addi_OBJECTS) $(addi_LDADD) $(LIBS)

bc0$(EXEEXT): $(bc0_OBJECTS) $(bc0_DEPENDENCIES)
	@rm -f bc0$(EXEEXT)
	$(LINK) $(bc0_LDFLAGS) $(bc0_OBJECTS) $(bc0_LDADD) $(LIBS)

bgezal$(EXEEXT): $(bgezal_OBJECTS) $(bgezal_DEPENDENCIES)
	@rm -f bgezal$(EXEEXT)
	$(LINK) $(bgezal_LDFLAGS) $(bgezal_OBJECTS) $(bgezal_LDADD) $(LIBS)

bgtz$(EXEEXT): $(bgtz_OBJECTS) $(bgtz_DEPENDENCIES)
	@rm -f bgtz$(EXEEXT)
	$(LINK) $(bgtz_LDFLAGS) $(bgtz_OBJECTS) $(bgtz_LDADD) $(LIBS)

blez$(EXEEXT): $(blez_OBJECTS) $(blez_DEPENDENCIES)
	@rm -f blez$(EXEEXT)
	$(LINK) $(blez_LDFLAGS) $(blez_OBJECTS) $(blez_LDADD) $(LIBS)

bltz$(EXEEXT): $(bltz_OBJECTS) $(bltz_DEPENDENCIES)
	@rm -f bltz$(EXEEXT)
	$(LINK) $(bltz_LDFLAGS) $(bltz_OBJECTS) $(bltz_LDADD) $(LIBS)

bltzal$(EXEEXT): $(bltzal_OBJECTS) $(bltzal_DEPENDENCIES)
	@rm -f bltzal$(EXEEXT)
	$(LINK) $(bltzal_LDFLAGS) $(bltzal_OBJECTS) $(bltzal_LDADD) $(LIBS)

coproc$(EXEEXT): $(coproc_OBJECTS) $(coproc_DEPENDENCIES)
	@rm -f coproc$(EXEEXT)
	$(LINK) $(coproc_LDFLAGS) $(coproc_OBJECTS) $(coproc_LDADD) $(LIBS)

divu$(EXEEXT): $(divu_OBJECTS) $(divu_DEPENDENCIES)
	@rm -f divu$(EXEEXT)
	$(LINK) $(divu_LDFLAGS) $(divu_OBJECTS) $(divu_LDADD) $(LIBS)

handler5$(EXEEXT): $(handler5_OBJECTS) $(handler5_DEPENDENCIES)
	@rm -f handler5$(EXEEXT)
	$(LINK) $(handler5_LDFLAGS) $(handler5_OBJECTS) $(handler5_LDADD) $(LIBS)

jalr$(EXEEXT): $(jalr_OBJECTS) $(jalr_DEPENDENCIES)
	@rm -f jalr$(EXEEXT)
	$(LINK) $(jalr_LDFLAGS) $(jalr_OBJECTS) $(jalr_LDADD) $(LIBS)

load$(EXEEXT): $(load_OBJECTS) $(load_DEPENDENCIES)
	@rm -f load$(EXEEXT)
	$(LINK) $(load_LDFLAGS) $(load_OBJECTS) $(load_LDADD) $(LIBS)

logical$(EXEEXT): $(logical_OBJECTS) $(logical_DEPENDENCIES)
	@rm -f logical$(EXEEXT)
	$(LINK) $(logical_LDFLAGS) $(logical_OBJECTS) $(logical_LDADD) $(LIBS)

lwl$(EXEEXT): $(lwl_OBJECTS) $(lwl_DEPENDENCIES)
	@rm -f lwl$(EXEEXT)
	$(LINK) $(lwl_LDFLAGS) $(lwl_OBJECTS) $(lwl_LDADD) $(LIBS)

lwr$(EXEEXT): $(lwr_OBJECTS) $(lwr_DEPENDENCIES)
	@rm -f lwr$(EXEEXT)
	$(LINK) $(lwr_LDFLAGS) $(lwr_OBJECTS) $(lwr_LDADD) $(LIBS)

mthi_lo$(EXEEXT): $(mthi_lo_OBJECTS) $(mthi_lo_DEPENDENCIES)
	@rm -f mthi_lo$(EXEEXT)
	$(LINK) $(mthi_lo_LDFLAGS) $(mthi_lo_OBJECTS) $(mthi_lo_LDADD) $(LIBS)

multu$(EXEEXT): $(multu_OBJECTS) $(multu_DEPENDENCIES)
	@rm -f multu$(EXEEXT)
	$(LINK) $(multu_LDFLAGS) $(multu_OBJECTS) $(multu_LDADD) $(LIBS)

mumble$(EXEEXT): $(mumble_OBJECTS) $(mumble_DEPENDENCIES)
	@rm -f mumble$(EXEEXT)
	$(LINK) $(mumble_LDFLAGS) $(mumble_OBJECTS) $(mumble_LDADD) $(LIBS)

shift$(EXEEXT): $(shift_OBJECTS) $(shift_DEPENDENCIES)
	@rm -f shift$(EXEEXT)
	$(LINK) $(shift_LDFLAGS) $(shift_OBJECTS) $(shift_LDADD) $(LIBS)

slti$(EXEEXT): $(slti_OBJECTS) $(slti_DEPENDENCIES)
	@rm -f slti$(EXEEXT)
	$(LINK) $(slti_LDFLAGS) $(slti_OBJECTS) $(slti_LDADD) $(LIBS)

store$(EXEEXT): $(store_OBJECTS) $(store_DEPENDENCIES)
	@rm -f store$(EXEEXT)
	$(LINK) $(store_LDFLAGS) $(store_OBJECTS) $(store_LDADD) $(LIBS)

sub$(EXEEXT): $(sub_OBJECTS) $(sub_DEPENDENCIES)
	@rm -f sub$(EXEEXT)
	$(LINK) $(sub_LDFLAGS) $(sub_OBJECTS) $(sub_LDADD) $(LIBS)

swl$(EXEEXT): $(swl_OBJECTS) $(swl_DEPENDENCIES)
	@rm -f swl$(EXEEXT)
	$(LINK) $(swl_LDFLAGS) $(swl_OBJECTS) $(swl_LDADD) $(LIBS)

swr$(EXEEXT): $(swr_OBJECTS) $(swr_DEPENDENCIES)
	@rm -f swr$(EXEEXT)
	$(LINK) $(swr_LDFLAGS) $(swr_OBJECTS) $(swr_LDADD) $(LIBS)

syscall$(EXEEXT): $(syscall_OBJECTS) $(syscall_DEPENDENCIES)
	@rm -f syscall$(EXEEXT)
	$(LINK) $(syscall_LDFLAGS) $(syscall_OBJECTS) $(syscall_LDADD) $(LIBS)

tester$(EXEEXT): $(tester_OBJECTS) $(tester_DEPENDENCIES)
	@rm -f tester$(EXEEXT)
	$(LINK) $(tester_LDFLAGS) $(tester_OBJECTS) $(tester_LDADD) $(LIBS)

tlbwr$(EXEEXT): $(tlbwr_OBJECTS) $(tlbwr_DEPENDENCIES)
	@rm -f tlbwr$(EXEEXT)
	$(LINK) $(tlbwr_LDFLAGS) $(tlbwr_OBJECTS) $(tlbwr_LDADD) $(LIBS)

xor$(EXEEXT): $(xor_OBJECTS) $(xor_DEPENDENCIES)
	@rm -f xor$(EXEEXT)
	$(LINK) $(xor_LDFLAGS) $(xor_OBJECTS) $(xor_LDADD) $(LIBS)

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = test_code/vmips.regcheck

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am:
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am:
uninstall: uninstall-am
all-am: Makefile $(PROGRAMS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:


mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-noinstPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-noinstPROGRAMS clean-compile clean-libtool clean-tags \
		clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-noinstPROGRAMS distclean-compile \
		distclean-libtool distclean-tags distclean-generic \
		clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-noinstPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-noinstPROGRAMS distclean-noinstPROGRAMS \
clean-noinstPROGRAMS maintainer-clean-noinstPROGRAMS \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool tags mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean

add.rom: add.exe
	$(VMIPSTOOL) --make-rom add.exe add.rom
addi.rom: addi.exe
	$(VMIPSTOOL) --make-rom addi.exe addi.rom
bc0.rom: bc0.exe
	$(VMIPSTOOL) --make-rom bc0.exe bc0.rom
bgezal.rom: bgezal.exe
	$(VMIPSTOOL) --make-rom bgezal.exe bgezal.rom
bgtz.rom: bgtz.exe
	$(VMIPSTOOL) --make-rom bgtz.exe bgtz.rom
blez.rom: blez.exe
	$(VMIPSTOOL) --make-rom blez.exe blez.rom
bltz.rom: bltz.exe
	$(VMIPSTOOL) --make-rom bltz.exe bltz.rom
bltzal.rom: bltzal.exe
	$(VMIPSTOOL) --make-rom bltzal.exe bltzal.rom
coproc.rom: coproc.exe
	$(VMIPSTOOL) --make-rom coproc.exe coproc.rom
divu.rom: divu.exe
	$(VMIPSTOOL) --make-rom divu.exe divu.rom
handler5.rom: handler5.exe
	$(VMIPSTOOL) --make-rom handler5.exe handler5.rom
jalr.rom: jalr.exe
	$(VMIPSTOOL) --make-rom jalr.exe jalr.rom
load.rom: load.exe
	$(VMIPSTOOL) --make-rom load.exe load.rom
logical.rom: logical.exe
	$(VMIPSTOOL) --make-rom logical.exe logical.rom
lwl.rom: lwl.exe
	$(VMIPSTOOL) --make-rom lwl.exe lwl.rom
lwr.rom: lwr.exe
	$(VMIPSTOOL) --make-rom lwr.exe lwr.rom
mthi_lo.rom: mthi_lo.exe
	$(VMIPSTOOL) --make-rom mthi_lo.exe mthi_lo.rom
multu.rom: multu.exe
	$(VMIPSTOOL) --make-rom multu.exe multu.rom
mumble.rom: mumble.exe
	$(VMIPSTOOL) --make-rom mumble.exe mumble.rom
shift.rom: shift.exe
	$(VMIPSTOOL) --make-rom shift.exe shift.rom
slti.rom: slti.exe
	$(VMIPSTOOL) --make-rom slti.exe slti.rom
store.rom: store.exe
	$(VMIPSTOOL) --make-rom store.exe store.rom
sub.rom: sub.exe
	$(VMIPSTOOL) --make-rom sub.exe sub.rom
swl.rom: swl.exe
	$(VMIPSTOOL) --make-rom swl.exe swl.rom
swr.rom: swr.exe
	$(VMIPSTOOL) --make-rom swr.exe swr.rom
syscall.rom: syscall.exe
	$(VMIPSTOOL) --make-rom syscall.exe syscall.rom
tester.rom: tester.exe
	$(VMIPSTOOL) --make-rom tester.exe tester.rom
tlbwr.rom: tlbwr.exe
	$(VMIPSTOOL) --make-rom tlbwr.exe tlbwr.rom
xor.rom: xor.exe
	$(VMIPSTOOL) --make-rom xor.exe xor.rom

# 1 C testcases and 28 asm testcases.
# 0 custom makefile fragment testcases.

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
