dnl Process this file with autoconf to produce a configure script.
AC_INIT(vmips.cc)

dnl Get the canonical and user-supplied names for the host and target. 
AC_CANONICAL_SYSTEM
program_prefix=NONE
AM_INIT_AUTOMAKE(vmips, 1.1.2)
AM_CONFIG_HEADER(config.h)

dnl Look for mips tool installation:
AC_ARG_WITH(mips,
[  --with-mips=MDIR        specify installation prefix of mips cross tools
                           (default MDIR = /opt/mips)],
[mipsdir="$withval"],
[mipsdir="/opt/mips"])dnl

dnl Look for mips tool binaries:
AC_ARG_WITH(mips-bin,
[  --with-mips-bin=DIR     specify path to mips cross tools' executables
                           (default MDIR/bin)],
[mipsbin="$withval"],
[mipsbin="${mipsdir}/bin"])dnl

dnl Sanity check the above settings.
test -d "$mipsdir" || \
 AC_MSG_ERROR([--with-mips directory \"$mipsdir\" does not exist])
test -d "$mipsbin" || \
 AC_MSG_ERROR([--with-mips-bin directory \"$mipsbin\" does not exist])

dnl Look for mips libraries:
AC_ARG_WITH(mips-lib,
[  --with-mips-lib=DIR     specify path to mips cross tools' libraries
                           (default MDIR/HOST/TARGET/lib)],
[mipslib="$withval"],
[mipslib="${mipsdir}/${host}/${target_alias}/lib"])dnl

dnl This crap is brought to you by the people who thought it would be fun
dnl to support multiple targets per prefix.
dnl
dnl The strategy here is to search all the possible directories (based
dnl on what we know about different binutils install procedures over the
dnl last few years) where the libraries might be. We honor the user's
dnl preference by putting it first in the search list, and by trying to
dnl make sure that we never add a directory twice.
dirs="$mipslib"
dirs="$dirs ${host_alias}/${target_alias}/lib"
dirs="$dirs ${host_alias}/${target}/lib"
dirs="$dirs ${host}/${target_alias}/lib"
dirs="$dirs ${host}/${target}/lib"
dirs="$dirs lib"
mipslibdirs=""
foundlibbfd=0
foundlibopcodes=0
foundlibiberty=0
for subdir in $dirs
do
	dir=$mipsdir/$subdir
	if test -d $dir
	then
		if test "(" $foundlibbfd -eq 0 ")" -a -f $dir/libbfd.la
		then
			foundlibbfd=1
			case "$mipslibdirs" in
			*-L$dir*) ;;
			*) mipslibdirs="${mipslibdirs} -L$dir" ;;
			esac
		fi
		if test "(" $foundlibopcodes -eq 0 ")" -a -f $dir/libopcodes.la
		then
			foundlibopcodes=1
			case "$mipslibdirs" in
			*-L$dir*) ;;
			*) mipslibdirs="${mipslibdirs} -L$dir" ;;
			esac
		fi
		if test "(" $foundlibiberty -eq 0 ")" -a -f $dir/libiberty.a
		then
			foundlibiberty=1
			case "$mipslibdirs" in
			*-L$dir*) ;;
			*) mipslibdirs="${mipslibdirs} -L$dir" ;;
			esac
		fi
	fi
done

dnl Check for C compiler.
dnl We have to do this early because AC_TRY_CPP depends on it.
AC_PROG_CC

AC_ARG_WITH(mips-include,
[  --with-mips-include=DIR specify path to mips cross tools' includes
                           (default MDIR/HOST/TARGET/include)],
[mipsinclude="$withval"],
[mipsinclude="$mipsdir/${host}/${target_alias}/include"])dnl
dirs="$mipsinclude"
dirs="$dirs $mipsdir/${host_alias}/${target_alias}/include"
dirs="$dirs $mipsdir/${host_alias}/${target}/include"
dirs="$dirs $mipsdir/${host}/${target}/include"
dirs="$dirs $mipsdir/include"
mipsincdirs=""
result='not found'
AC_REQUIRE_CPP
oldcppflags="$CPPFLAGS"
for subdir in $dirs
do
	if test -d "$subdir" -a "x$result" != xfound
	then
		CPPFLAGS="$oldcppflags -I$subdir"
		AC_MSG_CHECKING([for binutils headers in $subdir])
		AC_TRY_CPP([#include "bfd.h"
#include "dis-asm.h"],
		[case "$mipsincdirs" in
		*-I$subdir*) ;;
		*) mipsincdirs="-I$subdir" ;;
		esac
        result=found],[result='not found'])
        AC_MSG_RESULT($result)
		CPPFLAGS="$oldcppflags"
	fi
done

AC_MSG_CHECKING([for mips tool prefix])
mipstoolprefix=""
for file in ${mipsdir}/mips*/bin/*gcc ${mipsbin}/*gcc 
do
	case $dir in
		*\**) mipstoolprefix="";;
		*) mipstoolprefix=`echo "$file" |sed 's/gcc//'`;;
	esac
done
AC_MSG_RESULT($mipstoolprefix)
if test "x$mipstoolprefix" = "x"
then
AC_MSG_ERROR([cannot seem to find any mips tools under $mipsbin])
fi

AC_MSG_CHECKING([for cpp used by mips cc])
mipscpp=`${mipstoolprefix}gcc --print-prog-name=cpp`
case $mipscpp in
/*) ;;
changequote(,)dnl
*) [ -x "${mipsbin}/$mipscpp" ] && mipscpp="${mipsbin}/$mipscpp" ;;
changequote([,])dnl
esac
AC_MSG_RESULT($mipscpp)

AC_SUBST(mipslibdirs)
AC_SUBST(mipsbin)
AC_SUBST(mipsincdirs)
AC_SUBST(mipstoolprefix)
AC_DEFINE_UNQUOTED(MIPSTOOLPREFIX, "${mipstoolprefix}")
AC_SUBST(mipscpp)

AC_MSG_CHECKING([for cross tools BFD target name])
AC_ARG_WITH(mips-bfdtarget,
[  --with-mips-bfdtarget=TARG      specify mips cross tools BFD target name
                                   (defaults to guessing from objdump -i)],
[mipsbfdtarget="$withval"],
[mipsbfdtarget=`${mipstoolprefix}objdump -i | sed -n 2p`])dnl
AC_MSG_RESULT($mipsbfdtarget)
AC_SUBST(mipsbfdtarget)

AC_MSG_CHECKING([for cross tools target endianness])
AC_ARG_WITH(mips-endianness,
[  --with-mips-endianness=VAL      specify mips cross tools target endianness
                                   (defaults to guessing from objdump -i)],
[mipsendianness="$withval"],
[mipsendianness=`${mipstoolprefix}objdump -i | sh ${srcdir}/join.sh | sed -n "/^$mipsbfdtarget/p"`
case $mipsendianness in
*data\ big\ endian*)    mipsendianness="big" ;;
*data\ little\ endian*) mipsendianness="little" ;;
*)                    mipsendianness="unknown" ;;
esac])dnl
case $mipsendianness in 
big) ENDIAN_FLAG="-EB"
     AC_DEFINE(TARGET_BIG_ENDIAN,1)
     AC_DEFINE(TARGET_LITTLE_ENDIAN,0)
     ;;
little) ENDIAN_FLAG="-EL"
        AC_DEFINE(TARGET_LITTLE_ENDIAN,1)
        AC_DEFINE(TARGET_BIG_ENDIAN,0)
        ;;
unknown)
AC_MSG_ERROR([cannot determine endianness of mips cross tools])
;;
*)
AC_MSG_ERROR([must specify target endianness as big or little])
;;
esac
AC_MSG_RESULT($mipsendianness)
AC_SUBST(ENDIAN_FLAG)
AC_DEFINE_UNQUOTED(ENDIAN_FLAG, "${ENDIAN_FLAG}")

dnl Are we building a debugging version?
debug_cxxflags="-g"
optimize_cxxflags="-O2"
AC_ARG_ENABLE(debug,
[  --disable-debug         build an optimized (vs. default=debugging) VMIPS])
AC_MSG_CHECKING([whether to build an optimized or a debugging version])
case "x$enable_debug" in
x|xyes) 
  if test "x$CXXFLAGS" = "x"
  then
    CXXFLAGS="${debug_cxxflags}"
  fi
  enable_debug=debugging
  AC_DEFINE(INTENTIONAL_CONFUSION)
  AC_DEFINE(OPTIONS_DEBUG)
  ;;
xno|x*)
  if test "x$CXXFLAGS" = "x"
  then
    CXXFLAGS="${optimize_cxxflags}"
  fi
  enable_debug=optimized
  ;;
esac
AC_MSG_RESULT($enable_debug)

dnl Are we enabling or disabling the tty?
dnl Current versions cause a serious performance hit when the tty is used,
dnl so make it optional.
AC_ARG_ENABLE(tty,
[  --disable-tty           do not include (default=include) support for
                           emulated serial interface])
AC_MSG_CHECKING([whether to enable the emulated serial interface])
case "x$enable_tty" in
xno)
AC_DEFINE(TTY,0)
enable_tty=no;;
x|xyes|x*)
AC_DEFINE(TTY,1)
enable_tty=yes;;
esac
AC_MSG_RESULT($enable_tty)


dnl Checks for interesting flavors of Unix.
AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl We need libtool for compilation and linking against libtool libraries;
dnl hopefully we will not have to actually build libraries inside of vmips!
AC_PROG_AWK
AM_PROG_LIBTOOL
AC_PROG_CXX
if test "x$GXX" = "xyes"
then
	CXXFLAGS="$CXXFLAGS -Wall -fno-strict-aliasing"
fi
VMIPS_CXX_TEMPLATE_FUNCTIONS
AC_PROG_CPP
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_GCC_TRADITIONAL

dnl We want to run our tests using the C++ compiler.
dnl (You'd think. But it turns out that lots of autoconf tests are broken
dnl using the C++ compiler, and using the C results can actually get us
dnl farther.)
dnl AC_LANG_CPLUSPLUS

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h unistd.h getopt.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
VMIPS_TYPE_SOCKLEN_T
VMIPS_CXX_ATTRIBUTE_NORETURN
VMIPS_CXX_ATTRIBUTE_FORMAT

dnl Cross compiling will assume 32-bit target...
dnl we can probably figure out a better way to do this, though.
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(char, 1)

dnl Checks for library functions.
AC_FUNC_MMAP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(mktime)
AC_CHECK_FUNCS(gettimeofday strdup strerror strtoul)
AC_CHECK_FUNCS(random getopt strcasecmp)
AC_CHECK_FUNCS(select strtol)
AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_ntoa, nsl)

dnl Work around automake 1.5 bug.
AC_DEFINE(ASFLAGS,[],[Currently not used.])
AC_SUBST(ASFLAGS)
AC_DEFINE(AS,[],[Currently not used.])
AC_SUBST(AS)

dnl Checks for other system features.
VMIPS_LINK_STATIC_GETPWNAM

AC_OUTPUT([buildstat.sh
 Makefile
 vmips.spec
 doc/Makefile
 sample_code/ld.script
 sample_code/Makefile
 sample_code/xmboot/Makefile
 test_code/Makefile
 test_code/vmips.misc-tests/Makefile
 test_code/vmips.outcheck/Makefile
 test_code/vmips.regcheck/Makefile],
 [chmod +x buildstat.sh])

